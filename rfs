#!/bin/bash

RFS_PORT="22"

usage() {
  printf "Usage: %s <remote_username> <remote_path> <remote_ip> <remote_port>\n" "$0"
  printf "or\n"
  printf "Usage: %s close\n" "$0"
}

connect_rfs() {
  # Set variables for remote connection
  RFS_USER="$1"
  RFS_PATH="$2"
  RFS_IP="$3"

  # Set variables for local user so they have permissions
  # TODO: We should have an additional arg for local user so we don't have to guess
  LOCAL_USER="$(who | awk -F " " '{print $1}' | head -n 1)"
  LOCAL_UID="$(id -u $LOCAL_USER)"
  LOCAL_GID="$(id -g $LOCAL_USER)"

  # TODO: Make separate arg for local path in case a user doesn't want to use ~/Documents
  # TODO: Add check in case this dir doesn't exist. It likely always will, but this is good practice
  LOCAL_PATH="/home/$LOCAL_USER/Documents"
  {
    sshfs -p "$RFS_PORT" -o reconnect,allow_other,uid="${LOCAL_UID}",gid="${LOCAL_GID}" \
      "${RFS_USER}"@"${RFS_IP}":"${RFS_PATH}" "$LOCAL_PATH" && \
      printf "Connected RFS!\n"; } || \
      printf "Failed to connect with USER: ${RFS_USER}, IP: ${RFS_IP}, PATH: ${RFS_PATH}\n"
}

if [ $# -ne 1 ] && [ $# -ne 3 ] && [ $# -ne 4 ]; then
  usage
  exit 1
fi

if [ "${1}" == "close" ]; then
  sudo fusermount -uz ~/Documents
  exit 0
fi

if [ ! -z $4 ]; then
  RFS_PORT="$4"
fi

SSHFS_PATH="$(type -P sshfs)"
if [ -z $SSHFS_PATH ]; then
  printf "Must have sshfs installed\n"
  usage
  exit 1
fi

connect_rfs $1 $2 $3
